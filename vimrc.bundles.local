" install Vundle bundles
" if filereadable(expand("~/.kvimrc.bundles"))
"   source ~/.kvimrc.bundles
" endif
Plug 'bps/vim-textobj-python'
Plug 'NLKNguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'jceb/vim-orgmode'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'FooSoft/vim-argwrap'
Plug 'flazz/vim-colorschemes'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'
Plug 'godlygeek/tabular'

" Plug 'tpope/vim-obsession'
" Plug 'tpope/vim-speeddating'
" Plug 'Shougo/vimshell.vim'
" Plug 'itchyny/lightline.vim'
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-colorscheme-switcher'
" Plug 'Taverius/vim-colorscheme-manager'
" Plug 'jdkanani/vim-material-theme'
" Plug 'staskjs/vim-insert-cdn'
" Plug 'tpope/vim-projectionist'
" Plug 'szw/vim-maximizer'
" Plug 'HerringtonDarkholme/vim-worksheet'

UnPlug 'tomasr/molokai'
" UnPlug 'lightline.vim'
" UnPlug 'OmniSharp/omnisharp-vim'
" UnPlug 'vim-airline'
" UnPlug 'vim-airline-themes'
" UnPlug 'altercation/vim-colors-solarized'

" call s:unloadplug()

if count(g:bundle_groups, 'typescript')
    Plug 'leafgarland/typescript-vim'
    Plug 'Shougo/vimproc.vim', {'do' : 'make'}
    Plug 'Quramy/tsuquyomi'

    " let g:typescript_indent_disable = 1

    let g:typescript_compiler_binary = 'tsc'
    let g:typescript_compiler_options = ''

    let g:tsuquyomi_disable_quickfix = 1
    let g:syntastic_typescript_checkers = ['tsuquyomi']

    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost    l* nested lwindow
endif

if count(g:bundle_groups, 'beta')
    Plug 'Yggdroot/indentLine'
    UnPlug 'nathanaelkane/vim-indent-guides'
endif

if count(g:bundle_groups, 'javascript')
    Plug 'mattn/emmet-vim'
    Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
    " Plug 'hail2u/vim-css3-syntax'
    Plug 'groenewege/vim-less'
    Plug 'Quramy/vim-js-pretty-template'
    Plug 'jason0x43/vim-js-indent'
    " Plugin 'isRuslan/vim-es6'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'maksimr/vim-jsbeautify', {'do' : 'git submodule update --init --recursive && npm install'}

    let g:tern_map_keys=1
    let g:tern_show_signature_in_pum = 1
    let g:tern_show_argument_hints = 'on_hold'
    autocmd FileType javascript nnoremap <leader>tt :TernDef<CR>
    autocmd FileType javascript nnoremap <leader>tr :TernRefs<CR>
    autocmd FileType javascript nnoremap <leader>tR :TernRename<CR>
    " autocmd FileType javascript setlocal omnifunc=tern#Complete

    autocmd FileType javascript JsPreTmpl html
    autocmd FileType typescript JsPreTmpl html
    autocmd FileType typescript syn clear foldBraces

    let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs,angularui,angularuirouter,react,requirejs,vue,d3'

    " let NERDTreeIgnore = ['\.js$' , '\.js.map$', '^node_modules$[[dir]]']
    " let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components'
    " let g:ctrlp_custom_ignore = {
        " \ 'dir':  'node_modules\|DS_Store\|bower_components',
        " \ }

    " [> EditorConfig <]

    " to avoid issues with fugitive
    let g:EditorConfig_exclude_patterns = ['fugitive://.*']

    " [> JsBeautify <]

    " format selection
    autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
    autocmd FileType json vnoremap <buffer>  <c-f> :call RangeJsonBeautify()<cr>
    autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
    autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

    " format the whole file
    autocmd FileType javascript nnoremap <buffer>  <c-f> :call JsBeautify()<cr>
    autocmd FileType json nnoremap <buffer>  <c-f> :call JsonBeautify()<cr>
    autocmd FileType html nnoremap <buffer> <c-f> :call HtmlBeautify()<cr>
    autocmd FileType css nnoremap <buffer> <c-f> :call CSSBeautify()<cr>

endif

if count(g:bundle_groups, 'angularjs')
    Plug 'burnettk/vim-angular'

    let g:angular_find_ignore = ['build/', 'dist/']
endif

if count(g:bundle_groups, 'angular')
    " Plug 'magarcia/vim-angular2-snippets'
    Plug 'bdauria/angular-cli.vim'

endif

if count(g:bundle_groups, 'django')
    Plug 'tweekmonster/django-plus.vim'
endif

if count(g:bundle_groups, 'csharp')
    Plug 'OmniSharp/omnisharp-vim', { 'for': 'csharp' }

endif

if count(g:bundle_groups, 'nodejs')
    Plug 'moll/vim-node'

    autocmd User Node
        \ if &filetype == "javascript" |
        \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
        \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
        \ endif

endif

" trailingwhitespace {{{
    map <leader><leader><space> :FixWhitespace<cr>
" }}}


" argwrap {{{
    nnoremap <silent> <leader>wa :ArgWrap<CR>
" }}}

" YouCompleteMe {{{
    nnoremap <leader>gt :YcmCompleter GetType<cr>
    nnoremap <leader>go :YcmCompleter GoTo<cr>
    nnoremap <leader>gf :YcmCompleter GoToDefinition<cr>
    nnoremap <leader>gr :YcmCompleter GoToReferences<cr>
" }}}
