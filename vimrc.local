" ----------------------------------------------------------------------
" customized setting
"-----------------------------------------------------------------------

" vim-plug unplug
function! s:deregister(repo)
  let repo = substitute(a:repo, '[\/]\+$', '', '')
  let name = fnamemodify(repo, ':t:s?\.git$??')
  call remove(g:plugs, name)
  call remove(g:plugs_order, index(g:plugs_order, name))
endfunction

command! -nargs=1 -bar UnPlug call s:deregister(<args>)

" let file_ext = &filetype
let file_ext = expand('%:e')
if filereadable(expand("~/.vimrc.main"))

  if file_ext == 'ts'
    let g:bundle_groups=['nodejs', 'angular', 'html', 'css', 'typescript', 'vue', 'web']

  elseif file_ext == 'vue'
    let g:bundle_groups=['nodejs', 'javascript', 'html', 'css', 'typescript', 'vue', 'web']

  elseif file_ext == 'jsx'
    let g:bundle_groups=['nodejs', 'javascript', 'html', 'css', 'typescript', 'react', 'web']

  elseif file_ext == 'js' || file_ext == 'jsx' || file_ext == 'html'|| file_ext =='css' || file_ext=='scss' || file_ext=='less'
    let g:bundle_groups=['javascript', 'typescript', 'nodejs', 'react', 'vue', 'angular', 'web', 'html', 'css']

  elseif file_ext == 'py'
    let g:bundle_groups=['python', 'tmux', 'web', 'flask', 'css', 'javascript', 'typescript', 'react']
    " let g:bundle_groups=['python', 'tmux', 'web', 'jinja', 'django']

  elseif file_ext == 'ruby'
    let g:bundle_groups=['ruby', 'tmux']

  elseif file_ext == 'java'
    let g:bundle_groups=['java']

  elseif file_ext == 'go'
    let g:bundle_groups=['golang', 'tmux', 'web', 'css', 'javascript', 'typescript', 'react']

  elseif file_ext == 'exs' || file_ext == 'ex'
    let g:bundle_groups=['iex', 'tmux', 'web']

  else
    let g:bundle_groups=['web', 'nodejs', 'python', 'javascript', 'angularjs', 'angular', 'iex', 'markdown', 'html', 'css', 'tmux', 'beta', 'golang', 'ruby', 'typescript', 'csharp', 'django', 'vue', 'react', 'java']
  endif
  source ~/.vimrc.main

  " set NerdTreeIgnore
  let g:NERDTreeIgnore+=['\~$', 'node_modules', 'bower_components']

endif

" map space to leader
" map <space> ,
nmap <leader>d :bprevious<CR>:bdelete #<CR>

" 选中并高亮最后一次插入的内容
nnoremap gv `[v`]

if has("gui_running")
    " set guifont=Meslo\ LG\ M\ DZ\ Regular\ for\ Powerline:h13
    " set guifont=MesloLGSDZ\ Nerd\ Font:h13
    set guifont=Hack\ Nerd\ Font\ Mono:h13
    if has("gui_gtk2")   "GTK2
        set guifont=Monaco\ 12,Monospace\ 13
    endif
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set lines=50 columns =180
    set noimd
    set background=dark
    set t_Co=256
    set guicursor=a:hor10-Cursor
    colorscheme PaperColor
else
    set t_Co=256
    set background=dark
    " colorscheme PaperColor
    colorscheme gruvbox
endif

" 切换窗口
map <leader>ww <C-W>w
" 横向分割窗口
map <leader>ws <C-W>s
" 竖向分割窗口
map <leader>wv <C-W>v
" 关闭窗口
map <leader>wc <C-W>c

" 设置leader等待时间
" set timeoutlen=4000
" nnoremap <leader>. ;

" inoremap <C-e> <C-o>$
" 插入模式下新增上一行新增下一行
inoremap <leader>o <ESC>o
inoremap <leader>O <ESC>O
" imap \nn <C-O>o

" 0和^互换
noremap 0 ^
noremap ^ 0

" 设置' 为 ;重复查找上次 f 命令所查找的字符
nnoremap ' ;

" move the current line below
nnoremap <c-down> ddp

" move the current line above
" nnoremap <c-s-j> ddkP
noremap <c-up> :call feedkeys( line('.')==1 ? '' : 'ddkP' )<CR>

" insert mode uppercase the current word
"  <esc> : go to normal mode
"  v   : visual mode
"  iw    : select the current word
"  U   : uppercase selection
"  i   : back to insert mode
inoremap <c-u> <esc>viwUi

" quickly move current line, likely n[e or n]e
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

" Replaces the current word (and all occurrences).
nnoremap <Leader>rc :%s/\<<C-r><C-w>\>/
vnoremap <Leader>rc y:%s/<C-r>"/

" Changes the current word (and all occurrences).
nnoremap <Leader>cw :%s/\<<C-r><C-w>\>/<C-r><C-w>
vnoremap <Leader>cw y:%s/<C-r>"/<C-r>"

" Replace tabs with spaces.
nnoremap <Leader>rts :%s/   /    /g<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

if filereadable(expand("~/.vimrc.config.local"))
  source ~/.vimrc.config.local
endif
